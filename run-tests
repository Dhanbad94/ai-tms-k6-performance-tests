#!/bin/bash

echo "======================================================="
echo "======================================================="
allEnvironments=("staging" "preprod" "prod") 
allFeatures=("requests")
allTestTypes=("smoke" "load" "stress" "soak")
allPaths=("node" "basic")
testType=""
environment=""
feature=""
path=""

while getopts ht:e:f:p: option; do
    case "${option}" in
    # test type
    t)
        testType=${OPTARG}
        ;;
    # environment
    e)
        environment=${OPTARG}
        ;;
    # feature
    f)
        feature=${OPTARG}
        ;;
    # feature
    p)
        path=${OPTARG}
        ;;
    h)
        echo "Usage: run-tests [OPTION]"
        echo "-t    test type"
        echo "-e    environment"
        echo "-f    feature"
        echo "-p    path"
        echo "======================================================="
        echo "======================================================="
        exit
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
    esac
done

# check bash version number
shell=$(ps -p $$)
if [[ "$shell" == *"bash"* ]]; then
    if [[ -z "${BASH_VERSINFO}" ]] || [[ -z "${BASH_VERSINFO[0]}" ]] || [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
        echo "This script requires Bash version 4 or higher"
        exit 1
    fi
fi
# end check bash version number

# check parameters aren't blank
if [ "$testType" == "" ]; then
    echo "You must set test type."
    echo "======================================================="
    echo "======================================================="
    exit
fi
if [ "$environment" == "" ]; then
    echo "You must set environment."
    echo "======================================================="
    echo "======================================================="
    exit
fi
if [ "$feature" == "" ]; then
    echo "You must set feature."
    echo "======================================================="
    echo "======================================================="
    exit
fi
if [ "$path" == "" ]; then
    echo "You must set path."
    echo "======================================================="
    echo "======================================================="
    exit
fi
# end check parameters

# check path parameter is valid
index=-1

for i in "${!allPaths[@]}"; do
    if [[ "${allPaths[$i]}" = "${path}" ]]; then
        index=$i
        break
    fi
done

if [ "$index" -gt -1 ]; then
    echo "${path} is valid path."
else
    echo "${path} is not a valid path."
    echo "Following are the valid path:"
    for i in "${!allPaths[@]}"; do
        echo "${allPaths[$i]}"
    done
    echo "======================================================="
    echo "======================================================="
    exit
fi
# end test type parameter is valid

# check test type parameter is valid
index=-1

for i in "${!allTestTypes[@]}"; do
    if [[ "${allTestTypes[$i]}" = "${testType}" ]]; then
        index=$i
        break
    fi
done

if [ "$index" -gt -1 ]; then
    echo "${testType} is valid test type."
else
    echo "${testType} is not a valid test type."
    echo "Following are the valid test types:"
    for i in "${!allTestTypes[@]}"; do
        echo "${allTestTypes[$i]}"
    done
    echo "======================================================="
    echo "======================================================="
    exit
fi
# end test type parameter is valid

# check test feature parameter is valid
index=-1

for i in "${!allFeatures[@]}"; do
    if [[ "${allFeatures[$i]}" = "${feature}" ]]; then
        index=$i
        break
    fi
done

if [[ "${feature}" = "all" ]]; then
    index=1
fi

if [ "$index" -gt -1 ]; then
    echo "${feature} is valid feature."
else
    echo "${feature} is not a valid feature."
    echo "Following are the valid feature:"
    for i in "${!allFeatures[@]}"; do
        echo "${allFeatures[$i]}"
    done
    echo "======================================================="
    echo "======================================================="
    exit
fi
# end test type parameter is valid

# check environment parameter is valid
index=-1

for i in "${!allEnvironments[@]}"; do
    if [[ "${allEnvironments[$i]}" = "${environment}" ]]; then
        index=$i
        break
    fi
done

if [ "$index" -gt -1 ]; then
    echo "${environment} is valid environment."
else
    echo "${environment} is not a valid environment."
    echo "Following are the valid environments:"
    for i in "${!allEnvironments[@]}"; do
        echo "${allEnvironments[$i]}"
    done
    echo "======================================================="
    exit
fi
# end test type parameter is valid

# Check if the test file exists
TEST_FILE="./tests/k6-$feature.js"
if test -f "$TEST_FILE"; then
    echo "k6-$feature script exists."
else
    echo "k6-$feature script does not exist."
    echo "======================================================="
    exit
fi

# test run cleanup
# remove all previous test directories (xml files)
[ -d "reports" ] && rm -rf ./reports
# create reports dir well in advance to make sure report step doesn't fail
mkdir -p ./dist/reports

# create downloads directory if it doesn't exist
[ ! -d "reports" ] && mkdir reports
#end test run cleanup

# Set date-time timestamp for reports
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
REPORT_JSON="dist/reports/$feature-$testType-$environment-$TIMESTAMP.json"

#  Run tests
echo "Running k6 $testType test on $environment environment for $feature feature via $path."

# Run the test with JSON output first
K6_BROWSER_ENABLED=true k6 run -e type="$testType" -e env="$environment" -e path="$path" --out json="$REPORT_JSON" "$TEST_FILE"

# Check if k6-html-reporter is installed, if not, install it
if ! command -v k6-html-reporter &> /dev/null; then
    echo "Installing k6-html-reporter..."
    npm install -g k6-html-reporter
fi

# Generate HTML report from JSON
if [ -f "$REPORT_JSON" ]; then
    HTML_REPORT="dist/reports/$feature-$testType-$environment-$TIMESTAMP.html"
    echo "Generating HTML report from JSON data..."
    k6-html-reporter -s "$REPORT_JSON" -o "$(dirname "$HTML_REPORT")" -n "$(basename "$HTML_REPORT")" || true
    
    if [ -f "$HTML_REPORT" ]; then
        echo "HTML report generated successfully: $HTML_REPORT"
    else
        echo "HTML report generation failed. Trying alternative method..."
        
        # Create a simple HTML generator script
        TMP_SCRIPT="dist/reports/generate-html.js"
        cat > "$TMP_SCRIPT" << 'EOF'
const fs = require('fs');
const path = require('path');

// Get command line arguments
const jsonPath = process.argv[2];
const htmlPath = process.argv[3];

if (!jsonPath || !htmlPath) {
  console.error('Usage: node generate-html.js <json-file> <html-file>');
  process.exit(1);
}

try {
  // Read the JSON file
  const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
  
  // Create a simple HTML report
  const html = `
<!DOCTYPE html>
<html>
<head>
  <title>K6 Test Results</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    h1, h2, h3 { color: #333; }
    .dashboard { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 20px; }
    .metric-card { background: #f5f5f5; border-radius: 8px; padding: 15px; text-align: center; flex: 1; min-width: 200px; }
    .metric-card.pass { background: #dff0d8; }
    .metric-card.fail { background: #f2dede; }
    .metric-card h2 { margin-top: 0; }
    .metric-card .value { font-size: 36px; font-weight: bold; margin: 10px 0; }
    table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
    th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
    th { background-color: #f2f2f2; }
    tr:hover { background-color: #f5f5f5; }
    .threshold-pass { color: green; }
    .threshold-fail { color: red; }
  </style>
</head>
<body>
  <h1>K6 Performance Test Results</h1>
  
  <div class="dashboard">
    <div class="metric-card ${jsonData.metrics.iterations.values.count > 0 ? 'pass' : 'fail'}">
      <h2>Total Iterations</h2>
      <div class="value">${jsonData.metrics.iterations.values.count || 0}</div>
    </div>
    
    <div class="metric-card ${(jsonData.metrics.checks?.passes || 0) > 0 ? 'pass' : 'fail'}">
      <h2>Checks Passed</h2>
      <div class="value">${jsonData.metrics.checks?.passes || 0}</div>
    </div>
    
    <div class="metric-card ${(jsonData.metrics.checks?.fails || 0) === 0 ? 'pass' : 'fail'}">
      <h2>Checks Failed</h2>
      <div class="value">${jsonData.metrics.checks?.fails || 0}</div>
    </div>
    
    <div class="metric-card">
      <h2>Duration</h2>
      <div class="value">${Math.round(jsonData.state.testRunDurationMs / 1000)}s</div>
    </div>
  </div>

  <h2>HTTP Metrics</h2>
  <table>
    <tr>
      <th>Metric</th>
      <th>Value</th>
      <th>95th Percentile</th>
      <th>99th Percentile</th>
      <th>Max</th>
    </tr>
    ${Object.entries(jsonData.metrics)
      .filter(([key]) => key.startsWith('http_req'))
      .map(([key, data]) => `
        <tr>
          <td>${key}</td>
          <td>${data.values?.avg ? data.values.avg.toFixed(2) + 'ms' : 'N/A'}</td>
          <td>${data.values?.p(95) ? data.values['p(95)'].toFixed(2) + 'ms' : 'N/A'}</td>
          <td>${data.values?.p(99) ? data.values['p(99)'].toFixed(2) + 'ms' : 'N/A'}</td>
          <td>${data.values?.max ? data.values.max.toFixed(2) + 'ms' : 'N/A'}</td>
        </tr>
      `).join('')}
  </table>

  <h2>Thresholds</h2>
  <table>
    <tr>
      <th>Name</th>
      <th>Status</th>
    </tr>
    ${Object.entries(jsonData.metrics)
      .filter(([_, data]) => data.thresholds)
      .flatMap(([key, data]) => 
        Object.entries(data.thresholds).map(([threshold, result]) => `
          <tr>
            <td>${key}: ${threshold}</td>
            <td class="${result.ok ? 'threshold-pass' : 'threshold-fail'}">${result.ok ? 'PASS' : 'FAIL'}</td>
          </tr>
        `)
      ).join('')}
  </table>

  <h2>Checks</h2>
  <table>
    <tr>
      <th>Name</th>
      <th>Passes</th>
      <th>Fails</th>
      <th>Pass Rate</th>
    </tr>
    ${Object.entries(jsonData.root_group.checks || {}).map(([name, data]) => `
      <tr>
        <td>${name}</td>
        <td>${data.passes}</td>
        <td>${data.fails}</td>
        <td>${(data.passes / (data.passes + data.fails) * 100).toFixed(2)}%</td>
      </tr>
    `).join('')}
  </table>
</body>
</html>
  `;
  
  // Write the HTML file
  fs.writeFileSync(htmlPath, html);
  console.log(`HTML report generated at: ${htmlPath}`);
} catch (error) {
  console.error('Error generating HTML report:', error);
  process.exit(1);
}
EOF

        # Run the HTML generator if Node.js is available
        if command -v node &> /dev/null; then
            node "$TMP_SCRIPT" "$REPORT_JSON" "$HTML_REPORT"
        else
            echo "Node.js is not installed. Cannot generate HTML report without it."
            echo "Please install Node.js and run: node $TMP_SCRIPT $REPORT_JSON $HTML_REPORT"
        fi
    fi
else
    echo "JSON report not found. Cannot generate HTML report."
fi

echo "Finished running $testType test"
echo "Test reports saved to dist/reports/"
ls -la ./dist/reports/
echo "======================================================="
